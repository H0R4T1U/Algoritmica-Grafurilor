#include <iostream>
#include <fstream>
using namespace std;
ifstream fisier("input.txt");
struct muchie { int x, y, c; } u[100], sol[100];

void Kruskal() 
{
    int n, m, L[100];
    fisier >> n >> m;
    int i, j;
    for (i = 1; i <= m; i++)
        fisier >> u[i].x >> u[i].y >> u[i].c;

    // sortam muchiile crescator dupa pondere
    for (i = 1; i < m; i++)
        for (j = i + 1; j < m; j++)
            if (u[i].c > u[j].c) 
            {
                muchie aux = u[i]; 
                u[i] = u[j]; 
                u[j] = aux;
            }

    for (i = 1; i <= n; i++) 
        L[i] = i;
    int cost = 0, k = 0;
    i = 1;

    // determinam arborele de cost minim
    while (k < n - 1) 
    {
        // daca extremitatile fac parte din subarbori diferiti
        int arbx = L[u[i].x], arby = L[u[i].y];
        if (arbx != arby) 
        {
            // reunim subarborii
            sol[++k] = u[i]; 
            cost += u[i].c;
            for (j = 1; j <= n; j++)
                if (L[j] == arby) 
                    L[j] = arbx;
        }
        i++;
    }

    // afisam solutia obtinuta
    cout << cost << '\n';
    for (i = 1; i <= k; i++) 
        cout << sol[i].x << " " << sol[i].y << '\n';
}

int main() 
{
    Kruskal();
    return 0;
}