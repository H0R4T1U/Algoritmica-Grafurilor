#include <iostream>
#include <fstream>
#include <string>
#include <map>
using namespace std;
ifstream fin("input.txt");
struct FreqPair
{
    int freq = 0;
    char chr = 0;
    bool operator<(const FreqPair& oth) const
    {
        return freq < oth.freq || (freq == oth.freq && chr < oth.chr);
    }
};
multimap<FreqPair, string>Q;
int main()
{   

    string text;
    getline(fin, text);

    int freq[256]{};
    int letters = 0;

    // calculeaza frecventa fiecarui caracter in text
    for (char chr : text)
    {
        freq[int(chr)]++;
        // daca caracterul apare prima data, crestem nr de caractere distincte
        if (freq[int(chr)] == 1) letters++;
    }


    // afiseaza numarul de caractere distincte
    cout << letters << "\n";
    for (int i = 0; i < 256; ++i)
    {
        if (freq[i])
        {
            // afiseaza fiecare caracter si frecvența sa
            cout << char(i) << " " << freq[i] << "\n";
            // adauga in multimap perechea
            Q.insert({ { freq[i], char(i) }, string(1, i) });
        }
    }

    string code[256];
    // construirea arborelui Huffman
    while (--letters)
    {
        // luam elementele cu cele mai mici frecvente
        auto x = *Q.begin();
        // adaugam 0 la codul fiecarui caracter 
        for (char chr : x.second)
            code[int(chr)] = "0" + code[int(chr)];
        Q.erase(Q.begin());

        auto y = *Q.begin();
        // adaugam '1' la codul fiecarui caracter
        for (char chr : y.second)
            code[int(chr)] = "1" + code[int(chr)];
        Q.erase(Q.begin());
        // combinam frecventele, sirurile si adaugam perechea in multimap
        Q.insert({ { x.first.freq + y.first.freq, min(x.first.chr, y.first.chr) }, x.second + y.second });
    }

    // afisam codul obtinut
    for (char chr : text)
        cout << code[int(chr)];
    return 0;
}
